# Service Architecture and Data Flow:
#
#                        ┌───────────────┐
#                        │    Grafana    │ [Metrics Visualization]
#                        └───────┬───────┘
#                                │ reads metrics
#                        ┌───────┴───────┐
#                        │  Prometheus   │ [Metrics Storage]
#                        └───────┬───────┘
#                                │ collects metrics using Scrape Configs
#                                ▼
#                        ┌───────────────┐
#                        │     App       │ [Main Service]
#                        └───┬─────┬─────┘
#                            │     │     │
#         caches data        │     │     │ stores logs
#              ┌─────────────┘     │     └──────────┐
#              ▼                   │              ┌──▼──────────┐
#       ┌─────────────┐    stores │              │  Logstash   │ [Log Pipeline]
#       │   Redis     │    data   │              └──────┬──────┘
#       └─────────────┘           │                     │ forwards logs
#       [Cache Layer]             ▼                     ▼
#                         ┌───────────────┐    ┌────────────────┐
#                         │  PostgreSQL   │    │ Elasticsearch  │ [Log Storage]
#                         └───────┬───────┘    └───────┬────────┘
#                                │                     │
#                         manages│                     │visualizes logs
#                                ▼                     ▼
#                         ┌───────────────┐    ┌────────────────┐
#                         │   PGAdmin     │    │    Kibana      │ [Log Visualization]
#                         └───────────────┘    └────────────────┘
#                         [DB Management]
#
#                                    ┌────────────────┐
#                                    │ OpenTelemetry  │ [Distributed Tracing]
#                                    └────────────────┘
#                                    monitors all services
#
# Database Services:
# - PostgreSQL: Main relational database
# - Redis: In-memory cache database
# - Elasticsearch: Search engine and log storage
# - Prometheus: Time-series metrics database optimized for storing and querying time-based data like
#   application metrics. Unlike traditional DBs like PostgreSQL, it efficiently handles:
#   1. High write throughput of frequent metric updates
#   2. Time-based data retention and downsampling
#   3. Time-range queries for visualizing metric trends
#   4. Built-in support for rate calculations and aggregations
#
# Non-Database Services:
# - App: Main Flask application
# - PGAdmin: PostgreSQL admin interface
# - Kibana: Elasticsearch visualization
# - Logstash: Log processing pipeline
# - Grafana: Metrics visualization
# - OpenTelemetry: Distributed tracing and metrics collection
#
version: '3'

services:
  # db:
  #   image: postgres:15
  #   environment:
  #     - POSTGRES_DB=travelapp
  #     - POSTGRES_USER=postgres 
  #     - POSTGRES_PASSWORD=postgres
  #   ports:
  #     - "5432:5432"
  #   volumes:
  #     - postgres_data:/var/lib/postgresql/data
  #     - ./sql-practice.sql:/docker-entrypoint-initdb.d/init.sql

  # pgadmin:
  #   image: dpage/pgadmin4
  #   environment:
  #     - PGADMIN_DEFAULT_EMAIL=admin@admin.com
  #     - PGADMIN_DEFAULT_PASSWORD=admin
  #   ports:
  #     - "5050:80"
  #   depends_on:
  #     - db

  # redis:
  #   image: redis:latest
  #   ports:
  #     - "6379:6379"
  #   volumes:
  #     - redis_data:/data
  #   command: redis-server --appendonly yes

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.17.9
    environment:
      - discovery.type=single-node
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data

  # logstash:
  #   image: docker.elastic.co/logstash/logstash:7.17.9
  #   ports:
  #     - "5044:5044"
  #   volumes:
  #     - ./logstash/pipeline:/usr/share/logstash/pipeline
  #   depends_on:
  #     - elasticsearch

  # kibana:
  #   image: docker.elastic.co/kibana/kibana:7.17.9
  #   ports:
  #     - "5601:5601"
  #   environment:
  #     - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
  #   depends_on:
  #     - elasticsearch

  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'

  node-exporter:
    image: prom/node-exporter:latest
    ports:
      - "9100:9100"

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
    depends_on:
      - prometheus
    
  # otel-collector:
  #   image: otel/opentelemetry-collector:latest
  #   command: ["--config=/etc/otel-collector-config.yaml"]
  #   volumes:
  #     - ./otel-collector-config.yaml:/etc/otel-collector-config.yaml
  #   ports:
  #     - "4317:4317"   # OTLP gRPC receiver
  #     - "4318:4318"   # OTLP http receiver
  #     - "8888:8888"   # Prometheus metrics exposed by the collector
  #     - "8889:8889"   # Prometheus exporter metrics
  #   depends_on:
  #     - prometheus
  #     - elasticsearch

  # app:
  #   build: .
  #   ports:
  #     - "5000:5000"
  #     - "4444:4444"
  #   volumes:
  #     - ./app.py:/app/app.py

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "2181"]
      interval: 10s
      timeout: 5s
      retries: 5

  kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "9092"]
      interval: 10s
      timeout: 5s
      retries: 5

  kafka-ui:
    container_name: kafka-ui
    image: provectuslabs/kafka-ui:latest
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    depends_on:
      kafka:
        condition: service_healthy
volumes:
  postgres_data:
  redis_data:
  elasticsearch_data:
  prometheus_data:
  grafana_data:


# networks:
#  app-network:
#     driver: host
#     Driver options:
#     - bridge: Default. Isolates containers in a virtual network, good for most cases.
#     - host: Removes network isolation, shares host's network stack. Use for performance.
#     - overlay: For multi-host networking, essential in Docker Swarm.
#     - macvlan: Assigns MAC address to container, appears as physical device on network.
#     - none: Disables networking. Use for maximum isolation.