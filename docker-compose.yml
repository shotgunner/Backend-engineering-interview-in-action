# Service Architecture and Data Flow:
#
#                        ┌───────────────┐
#                        │    Grafana    │ [Metrics Visualization]
#                        └───────┬───────┘
#                                │ reads metrics
#                        ┌───────┴───────┐
#                        │  Prometheus   │ [Metrics Storage]
#                        └───────┬───────┘
#                                │ collects metrics
#                                ▼
#                        ┌───────────────┐
#                        │     App       │ [Main Service]
#                        └───┬─────┬─────┘
#                            │     │     │
#         caches data        │     │     │ stores logs
#              ┌─────────────┘     │     └──────────┐
#              ▼                   │              ┌──▼──────────┐
#       ┌─────────────┐    stores │              │  Logstash   │ [Log Pipeline]
#       │   Redis     │    data   │              └──────┬──────┘
#       └─────────────┘           │                     │ forwards logs
#       [Cache Layer]             ▼                     ▼
#                         ┌───────────────┐    ┌────────────────┐
#                         │  PostgreSQL   │    │ Elasticsearch  │ [Log Storage]
#                         └───────┬───────┘    └───────┬────────┘
#                                │                     │
#                         manages│                     │visualizes logs
#                                ▼                     ▼
#                         ┌───────────────┐    ┌────────────────┐
#                         │   PGAdmin     │    │    Kibana      │ [Log Visualization]
#                         └───────────────┘    └────────────────┘
#                         [DB Management]
#
#                                    ┌────────────────┐
#                                    │ OpenTelemetry  │ [Distributed Tracing]
#                                    └────────────────┘
#                                    monitors all services
#
# Database Services:
# - PostgreSQL: Main relational database
# - Redis: In-memory cache database
# - Elasticsearch: Search engine and log storage
# - Prometheus: Time-series metrics database optimized for storing and querying time-based data like
#   application metrics. Unlike traditional DBs like PostgreSQL, it efficiently handles:
#   1. High write throughput of frequent metric updates
#   2. Time-based data retention and downsampling
#   3. Time-range queries for visualizing metric trends
#   4. Built-in support for rate calculations and aggregations
#
# Non-Database Services:
# - App: Main Flask application
# - PGAdmin: PostgreSQL admin interface
# - Kibana: Elasticsearch visualization
# - Logstash: Log processing pipeline
# - Grafana: Metrics visualization
# - OpenTelemetry: Distributed tracing and metrics collection
#
services:
  db:
    image: postgres:15
    environment:
      - POSTGRES_DB=travelapp
      - POSTGRES_USER=postgres 
      - POSTGRES_PASSWORD=postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./sql-practice.sql:/docker-entrypoint-initdb.d/init.sql

  pgadmin:
    image: dpage/pgadmin4
    environment:
      - PGADMIN_DEFAULT_EMAIL=admin@admin.com
      - PGADMIN_DEFAULT_PASSWORD=admin
    ports:
      - "5050:80"
    depends_on:
      - db

  redis:
    image: redis:latest
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.17.9
    environment:
      - discovery.type=single-node
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data

  logstash:
    image: docker.elastic.co/logstash/logstash:7.17.9
    ports:
      - "5044:5044"
    volumes:
      - ./logstash/pipeline:/usr/share/logstash/pipeline
    depends_on:
      - elasticsearch

  kibana:
    image: docker.elastic.co/kibana/kibana:7.17.9
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    depends_on:
      - elasticsearch

  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
    depends_on:
      - prometheus

  otel-collector:
    image: otel/opentelemetry-collector:latest
    command: ["--config=/etc/otel-collector-config.yaml"]
    volumes:
      - ./otel-collector-config.yaml:/etc/otel-collector-config.yaml
    ports:
      - "4317:4317"   # OTLP gRPC receiver
      - "4318:4318"   # OTLP http receiver
      - "8888:8888"   # Prometheus metrics exposed by the collector
      - "8889:8889"   # Prometheus exporter metrics
    depends_on:
      - prometheus
      - elasticsearch

  app:
    build: .
    ports:
      - "5000:5000"
    volumes:
      - ./app.py:/app/app.py
    depends_on:
      - db
      - redis
      - elasticsearch
      - otel-collector
    environment:
      - FLASK_ENV=development
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4317
      - OTEL_SERVICE_NAME=flask-app
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  elasticsearch_data:
  prometheus_data:
  grafana_data: